#This code needs to be run in Thonny Python or any other compatible compilers

import RPi.GPIO as GPIO
import Adafruit_MCP3008
import Adafruit_GPIO.SPI as SPI
import time
import os
import sys
import urllib.request		         
import serial               
import webbrowser
from w1thermsensor import W1ThermSensor, Unit

CLK = 11
MOSI = 10
MISO = 9
CS = 8
mcp = Adafruit_MCP3008.MCP3008(clk=CLK, mosi=MOSI, miso=MISO, cs=CS)

GPIO.setmode(GPIO.BCM)
GPIO.setwarnings(False)
door_sensor = 18
relay1 = 26
relay2 = 21
GPIO.setup(relay1,GPIO.OUT)
GPIO.setup(relay2,GPIO.OUT)
GPIO.setup(door_sensor,GPIO.IN)

sensor = W1ThermSensor()
ser = serial.Serial ("/dev/ttyUSB0",timeout=1)
map_link=""

def send_temp_sms():
    global map_link
    print("sending SMS..")

    cmd='AT\r\n'
    ser.write(cmd.encode())
    time.sleep(2)
    rcv = ser.read(20)
    print(rcv)
    cmd='AT+CMGF=1\r\n'
    ser.write(cmd.encode())
    time.sleep(2)
    rcv = ser.read(20)
    print(rcv)                                             
    phno="6309971249"                          
    cmd='AT+CMGS="'+str(phno)+'"\r\n'
    ser.write(cmd.encode())
    rcv = ser.read(20)
    print(rcv)                        
    time.sleep(1)
    msg="Temperature increase in manhole at location:"
    ser.write(msg.encode())
    cmd=map_link
    ser.write(cmd.encode())  # Message
    
    #ser.write(msg.encode())  # Message
    time.sleep(1)
    cmd = "\x1A"
    ser.write(cmd.encode()) # Enable to send SMS
    time.sleep(10)
    print('SMS Sent')
    time.sleep(1)


def send_gas_sms():
    global map_link
    print("sending SMS..")

    cmd='AT\r\n'
    ser.write(cmd.encode())
    time.sleep(2)
    rcv = ser.read(20)
    print(rcv)
    cmd='AT+CMGF=1\r\n'
    ser.write(cmd.encode())
    time.sleep(2)
    rcv = ser.read(20)
    print(rcv)                                             
    phno="6309971249"                          
    cmd='AT+CMGS="'+str(phno)+'"\r\n'
    ser.write(cmd.encode())
    rcv = ser.read(20)
    print(rcv)                        
    time.sleep(1)
    msg="gas increase in manhole at location:"
    ser.write(msg.encode())
    cmd=map_link
    ser.write(cmd.encode())  # Message
    
    #ser.write(msg.encode())  # Message
    time.sleep(1)
    cmd = "\x1A"
    ser.write(cmd.encode()) # Enable to send SMS
    time.sleep(10)
    print('SMS Sent')
    time.sleep(1)

def send_water_sms():
    global map_link
    print("sending SMS..")

    cmd='AT\r\n'
    ser.write(cmd.encode())
    time.sleep(2)
    rcv = ser.read(20)
    print(rcv)
    cmd='AT+CMGF=1\r\n'
    ser.write(cmd.encode())
    time.sleep(2)
    rcv = ser.read(20)
    print(rcv)                                             
    phno="6309971249"                          
    cmd='AT+CMGS="'+str(phno)+'"\r\n'
    ser.write(cmd.encode())
    rcv = ser.read(20)
    print(rcv)                        
    time.sleep(1)
    msg="water level increase in manhole at location:"
    ser.write(msg.encode())
    cmd=map_link
    ser.write(cmd.encode())  # Message
    
    #ser.write(msg.encode())  # Message
    time.sleep(1)
    cmd = "\x1A"
    ser.write(cmd.encode()) # Enable to send SMS
    time.sleep(10)
    print('SMS Sent')
    time.sleep(1)

def send_door_sms():
    global map_link
    print("sending SMS..")

    cmd='AT\r\n'
    ser.write(cmd.encode())
    time.sleep(2)
    rcv = ser.read(20)
    print(rcv)
    cmd='AT+CMGF=1\r\n'
    ser.write(cmd.encode())
    time.sleep(2)
    rcv = ser.read(20)
    print(rcv)                                             
    phno="6309971249"                          
    cmd='AT+CMGS="'+str(phno)+'"\r\n'
    ser.write(cmd.encode())
    rcv = ser.read(20)
    print(rcv)                        
    time.sleep(1)
    msg="manhole opens at location:"
    ser.write(msg.encode())
    cmd=map_link
    ser.write(cmd.encode())  # Message
    
    #ser.write(msg.encode())  # Message
    time.sleep(1)
    cmd = "\x1A"
    ser.write(cmd.encode()) # Enable to send SMS
    time.sleep(10)
    print('SMS Sent')
    time.sleep(1)
    

prv=0
def GPS_Info():
    global NMEA_buff
    global lat_in_degrees
    global long_in_degrees
    nmea_time = []
    nmea_latitude = []
    nmea_longitude = []
    nmea_time = NMEA_buff[0]                    #extract time from GPGGA string
    nmea_latitude = NMEA_buff[1]                #extract latitude from GPGGA string
    nmea_longitude = NMEA_buff[3]               #extract longitude from GPGGA string
    
    #print("NMEA Time: ", nmea_time,'\n')
    #print ("NMEA Latitude:", nmea_latitude,"NMEA Longitude:", nmea_longitude,'\n')
    try:
        lat = float(nmea_latitude)                  #convert string into float for calculation
        longi = float(nmea_longitude)               #convertr string into float for calculation
    except:
        lat=0
        longi=0
    lat_in_degrees = convert_to_degrees(lat)    #get latitude in degree decimal format
    long_in_degrees = convert_to_degrees(longi) #get longitude in degree decimal format
    

def convert_to_degrees(raw_value):
    decimal_value = raw_value/100.00
    
    degrees = int(decimal_value)
    mm_mmmm = (decimal_value - int(decimal_value))/0.6
    position = degrees + mm_mmmm
    position = "%.4f" %(position)
    return position

gpgga_info = "$GPGGA,"
ser = serial.Serial ("/dev/ttyUSB0",timeout=1)              #Open port with baud rate for raspberry pi zero- ttyAMA0   for raspberry pi3 ttyS0
GPGGA_buffer = 0
NMEA_buff = 0
lat_in_degrees = 0
long_in_degrees = 0

kk=0

try:
    while True:
        ii=0
        while(ii<10):
            print('Read GPS Data')
            received_data = (str)(ser.readline())                   #read NMEA string received
            GPGGA_data_available = received_data.find(gpgga_info)   #check for NMEA GPGGA string
            if(kk==0):
                lat_in_degrees=0
                lat_in_degrees=0
                map_link = 'http://maps.google.com/?q=' + str(lat_in_degrees) + ',' + str(long_in_degrees)    #create link to plot location on Google map

            if (GPGGA_data_available>0):
                kk=1
                GPGGA_buffer = received_data.split("$GPGGA,",1)[1]  #store data coming after "$GPGGA," string 
                NMEA_buff = (GPGGA_buffer.split(','))               #store comma separated data in buffer
                GPS_Info()                                          #get time, latitude, longitude
            ii=ii+1
                
        map_link = 'http://maps.google.com/?q=' + str(lat_in_degrees) + ',' + str(long_in_degrees)    #create link to plot location on Google map
        print("lat in degrees:", lat_in_degrees," long in degree: ", long_in_degrees, '\n')
        print()
        print(map_link)
        #ii=ii+1
        temperature_celsius = sensor.get_temperature()
        print("The temperature is %s Celsius" % temperature_celsius)
        if temperature_celsius > 40.0:
            GPIO.output(relay1, GPIO.HIGH)
            send_temp_sms()
        else:
            GPIO.output(relay1, GPIO.LOW)
            time.sleep(1)
        
        mq7 = mcp.read_adc(0)
        print("mq7 Value:", mq7)
        if mq7 > 300:
            GPIO.output(relay2, GPIO.HIGH)
            send_gas_sms()
        else:
            GPIO.output(relay2, GPIO.LOW)
            time.sleep(1)    

        waterlevel = mcp.read_adc(1)
        print("water level Value:", waterlevel)
        if waterlevel > 400:
            send_water_sms()
        
            
        if GPIO.input(door_sensor)==GPIO.HIGH:
            print("door opened!")
            send_door_sms()
        else:
            print("door closed.")
        time.sleep(1)
        
finally:
    # Clean up the GPIO on exit.
    #mcp.close()
    GPIO.cleanup()
